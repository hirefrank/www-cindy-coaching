name: Deploy to Production

on:
  # Manual deployment with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production
  
  # Auto-deploy to production on main branch
  push:
    branches:
      - main
  
  # Deploy on Sanity webhook
  repository_dispatch:
    types: [sanity-update]

# Prevent concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    
    # Set environment based on trigger
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests (if any)
        run: npm test --if-present
        continue-on-error: true
      
      - name: Build site
        run: npm run build
        env:
          PUBLIC_SANITY_PROJECT_ID: y67p94j5
          NODE_ENV: production
      
      - name: Deploy to Cloudflare Workers
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'preview' && '--env preview' || '' }}
      
      - name: Purge Cloudflare cache
        if: success()
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
        continue-on-error: true
      
      - name: Create deployment annotation
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'production' }}';
            const deploymentUrl = environment === 'preview' 
              ? 'https://preview.cindy-romanzo-coaching.workers.dev' 
              : 'https://cindyromanzo.com';
            
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: environment,
              auto_merge: false,
              required_contexts: [],
              production_environment: environment === 'production'
            }).then(async (deployment) => {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.data.id,
                state: 'success',
                environment_url: deploymentUrl,
                description: 'Deployed to Cloudflare Workers'
              });
            });
      
      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}';
            const environment = '${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'production' }}';
            const emoji = status === 'success' ? '✅' : '❌';
            const message = `${emoji} Deployment to ${environment} ${status}!`;
            
            console.log(message);
            
            // Optional: Add Slack/Discord notification here
        continue-on-error: true